{
  "Download a file": {
    "prefix": "!dnjs",
    "body": [
      "const download = (uri, filename) => {",
      "  return new Promise((resolve, reject) => {",
      "    request.head(uri, function (err, res, body) {",
      "      request(uri).pipe(fs.createWriteStream(filename)).on('close', resolve);",
      "    });",
      "  });",
      "};"
    ],
    "description": "Creates a basic file download template"
  },
  "Puppeteer setup": {
    "prefix": "!pupjs",
    "body": [
      "const puppeteer = require('puppeteer');",
      "",
      "(async () => {",
      "  const browser = await puppeteer.launch();",
      "  const page = await browser.newPage();",
      "  await page.goto('https://example.com');",
      "  await page.screenshot({ path: 'example.png' });",
      "",
      "  await browser.close();",
      "})();"
    ],
    "description": "Creates a basic puppeter template"
  },
  "Error": {
    "prefix": "err",
    "body": ["if (err) {", "  console.log(err);", "}"]
  },
  "Loop timeout": {
    "prefix": "!ltmjs",
    "body": [
      "var list = [1,2,3,4];",
      "",
      "for (var x = 0, ln = list.length; x < ln; x++) {",
      "  setTimeout(function(y) {",
      "    console.log(\"%d => %d\", y, list[y] += 10);",
      "  }, x * 500, x); // we're passing x",
      "}"
    ],
    "description": "Creates a basic loop timeout"
  },
  "Promise": {
    "prefix": "!pmjs",
    "body": [
      "const ${1:myFunction} = () => {",
      "  return new Promise((resolve, reject) => {",
      "    // do something",
      "    resolve();",
      "  });",
      "};"
    ],
    "description": "Creates a basic promise"
  },
  "Express starter template": {
    "prefix": "!stjs",
    "body": [
      "const express = require(\"express\");",
      "const app = express();",
      "const PORT = process.env.PORT || 3000",
      "",
      "app.get(\"/\", function (req, res) {",
      "   res.send(\"hello\");",
      "});",
      "",
      "app.listen(PORT, function () {",
      "   console.log(\"server started at \" + PORT);",
      "});"
    ],
    "description": "Creates a app starter template"
  },
  "React starter index template": {
    "prefix": "!isrc",
    "body": [
      "import React from \"react\";",
      "import ReactDOM from \"react-dom\";",
      "import App from \"./App\";",
      "",
      "ReactDOM.render(<App />, document.getElementById(\"root\"));"
    ],
    "description": "Creates a index starter template"
  },
  "React starter app template": {
    "prefix": "!asrc",
    "body": [
      "import React from \"react\";",
      "",
      "const App = () => {",
      "    return (",
      "        <div>",
      "           <h1>hello</h1>",
      "        </div>",
      "    );",
      "}",
      "",
      "export default App;"
    ],
    "description": "Creates a app starter template"
  },
  "React starter component generator": {
    "prefix": "!corc",
    "body": [
      "import React from \"react\";",
      "",
      "const ${1:Compmonent} = () => {",
      "    return (",
      "        <div>",
      "           <h1>hello</h1>",
      "        </div>",
      "    );",
      "}",
      "",
      "export default ${1:Compmonent};"
    ],
    "description": "Create a app starter template"
  }
}
